configfile: "config/config.yaml"

output_list=["test2.txt"]




genecore_prefix="/g/korbel/shared/genecore"
date_folder="2022-09-01-HVHFGAFX3"
data_location = "/scratch/tweber/DATA/MC_DATA/TEST"


import os, sys
import re
import collections

if config["genecore"] is True and config["genecore_date_folder"]:

    l = [e for e in os.listdir("{genecore_prefix}/{date_folder}".format(genecore_prefix=config["genecore_prefix"], date_folder=config["genecore_date_folder"])) if e.endswith(".gz")]

    d_master = collections.defaultdict(dict)
    sub_l = list()
    for j, e in enumerate(l):
        sub_l.append(e)
        if (j+1) % 192 == 0:
            common_element = findstem(sub_l)
            l_elems = common_element.split('lane1')
            prefix = l_elems[0]
            technician_name = l_elems[0].split("_")[-2]
            sample = l_elems[1].split("x")[0]
            index = l_elems[1].split("x")[1].split("PE")[0][-1]
            pe_index = common_element[-1]
            sub_l = list()

            d_master[sample]["prefix"] = prefix
            d_master[sample]["technician_name"] = technician_name
            d_master[sample]["index"] = index
            d_master[sample]["pe_index"] = pe_index
            d_master[sample]["common_element"] = common_element

    samples_to_process = config["samples_to_process"] if len(config["samples_to_process"]) > 0 else list(d_master.keys())


    config["data_location"] = "{data_location}/{genecore_date_folder}".format(data_location=config["data_location"], genecore_date_folder=config["genecore_date_folder"])

    genecore_list = [
        expand("{data_location}/{sample}/fastq/{sample}x0{index}PE20{cell_nb}.{pair}.fastq.gz",
            data_location=config["data_location"],
            sample=sample,
            index=d_master[sample]["index"],
            cell_nb=list(range((int(d_master[sample]["pe_index"]) * 100) + 1, (int(d_master[sample]["pe_index"]) * 100) + 97)),
            pair=["1","2"]
        )
        for sample in d_master if sample in samples_to_process
    ]
    

# exit()
rule all:
    input:
        genecore_list

#     output_list

# empty_samples_list = [
#     {
#         "QUERY_SAMPLE_CELL": "{}{}".format(common, str(e)),
#         "QUAL >= 0": np.nan,
#         "QUAL >= {}".format(str(qual_cutoff)): np.nan,
#     }
#     for e in list(range((int(index) * 100) + 1, (int(index) * 100) + 97))
#     if "{}{}".format(common, str(e)) not in vcf_list
# ]


rule genecore:
    input:
        lambda wc: expand("{genecore_prefix}/{date_folder}/{prefix}lane1{{sample}}x0{{index}}PE20{{cell_nb}}_{{pair}}_sequence.txt.gz",
            genecore_prefix=config["genecore_prefix"],
            date_folder=config["genecore_date_folder"],
            prefix=d_master[wc.sample]["prefix"],
            # technician_name=d_master[wc.sample]["technician_name"],
            # sample=wc.sample,
            # index=d_master[wc.sample]["index"],
            # pe_index=d_master[wc.sample]["pe_index"],
            # cell_nb=list(range((int(d_master[wc.sample]["pe_index"]) * 100) + 1, (int(d_master[wc.sample]["pe_index"]) * 100) + 97)),
            # pair=["1","2"]
        )

    output:
        "{data_location}/{sample}/fastq/{sample}x0{index}PE20{cell_nb}.{pair}.fastq.gz"
    wildcard_constraints:
        name="Benito|Hasenfeld",
        index="[0-9]{1}",
        pe_index="[0-9]{1}",
        cell_nb="[0-9]{3}",
        pair="[1-2]{1}"
    shell:
        "ln -s {input} {output}"



rule fastqc:
    input:
        "{folder}/{sample}/fastq/{cell}.{pair}.fastq.gz",
    output:
        html=report(
            "{folder}/{sample}/fastqc/{cell}_{pair}_fastqc.html",
            category="FastQC",
            subcategory="{sample}",
            labels={"Sample": "{sample}", "Cell": "{cell}", "Pair": "{pair}"},
        ),
        zip="{folder}/{sample}/fastqc/{cell}_{pair}_fastqc.zip",
    params:
        "--quiet",
    log:
        "{folder}/log/fastqc/{sample}/{cell}_{pair}.log",
    threads: 1
    resources:
        mem_mb=get_mem_mb,
    wrapper:
        "v1.7.0/bio/fastqc"